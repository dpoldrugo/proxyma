package m.c.m.proxyma.buffers;

import java.io.*;

/**
 * <p>
 * This class implements a Reader Class for the FileBuffer.
 * To read more than once the same data you have to execute reset() method
 * between every read operation.
 * </p><p>
 * NOTE: this software is released under GPL License.
 * See the LICENSE of this distribution for more informations.
 * </p>
 *
 * @author Marco Casavecchia Morganti (marcolinuz) [ICQ UIN: 245662445]
 * @version $Id: FileBufferReader.java 138 2010-06-20 13:53:32Z marcolinuz $
 */
public class FileBufferReader implements ByteBufferReader {
    /**
     * Create a reader ovedr the given FileBuffer
     */
    public FileBufferReader(FileBuffer fileBuffer) throws IOException {
        buffer = new File(fileBuffer.getFileFullPath());
        if (!buffer.canRead())
            throw new IOException("Can't read from temporary file \"" + buffer.getName() + "\"");

        bis = new BufferedInputStream(new FileInputStream(buffer));
        theBuffer = fileBuffer;
    }

    /**
     * Reads data from the file and stores them into the provided byte array.
     *
     * @param data the byte array where data will be written
     * @param size the max number of data that can be written.
     * @return the number of transfered bytes or -1 if there are no more data to read (the end of the buffer was reached).
     */
    @Override
    public int readBytes(byte[] data, int size) throws IOException {
        return bis.read(data, 0, size);
    }

    /**
     * Read a single byte of data from the buffer
     *
     * @return the int value of the byte or -1 if the end of the data was reached.
     * @throws java.io.IOException
     */
    @Override
    public int readByte() throws IOException {
        return bis.read();
    }

    /**
     * Resets the Reader, next read operation will start fom the begin of the buffer.
     */
    @Override
    public void reset() throws IOException {
        bis.close();
        bis = new BufferedInputStream(new FileInputStream(buffer));        
    }


    /**
     * returns the whole file into a new byte array.
     * WARNING! This method could be memory hungry if used with large size files.
     *
     * @return the generated byteArray;
     * @throws java.io.IOException
     */
    @Override
    public byte[] getWholeBufferAsByteArray() throws IOException {
        byte[] retVal = new byte[(int) buffer.length()];
        bis.read(retVal, 0, retVal.length);
        return retVal;
    }

    /**
     * Returns the size (in bytes) of the data into the buffer.
     *
     * @return the size of the buffer in bytes.
     */
    @Override
    public long getSize() {
        return theBuffer.getSize();
    }

    /**
     * close and delete the temporary file..
     */
    @Override
    protected void finalize() throws Throwable {
        try {
            bis.close();
        } finally {
            super.finalize();
        }
    }

    //The file that rappresents the buffer
    private File buffer = null;

    //The FileBuffer to read from
    private FileBuffer theBuffer = null;

    //The input stream to get data from it
    private BufferedInputStream bis = null;
}
